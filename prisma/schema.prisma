// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum ROLE {
  USER
  ADMIN
  MOD
}

enum STOCK {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  CANCELLED
  DELIVERED
  REFUNDED
}

model Category {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
  // product   Product? @relation(fields: [productId], references: [id])
  // productId String?
}

model Billboard {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  imageUrl  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  price       Int       @db.Integer
  newPrice    Int?      @db.Integer
  description String    @db.Text
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  stock       STOCK     @default(IN_STOCK)
  sell        Int       @default(0) @db.Integer
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  images      Image[]   @relation("ProductToImage")
  sizes       Size[]    @relation("ProductToSize")
  colors      Color[]   @relation("ProductToColor")
}

model Size {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  value     String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductToSize")
}

model Color {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  value     String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductToColor")
}

model Image {
  id        String   @id @default(cuid())
  imageUrl  String   @db.Text
  product   Product? @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  productId String?
}

model Order {
  id           String        @id @default(cuid())
  totalPrice   Int           @db.Integer
  totalItems   Int
  status       ORDER_STATUS  @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  orderedItems OrderedItem[]
}

model OrderedItem {
  id          String   @id @default(cuid())
  price       Int      @db.Integer
  quantity    Int
  productId   String
  productName String   @db.VarChar(255)
  order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model DeliveryAddress {
  id             String   @id @default(cuid())
  name           String   @db.VarChar(255)
  address        String   @db.VarChar(255)
  city           String   @db.VarChar(255)
  zip            String   @db.VarChar(20)
  googleMapLink  String?
  insideDhaka    Boolean
  phoneNumber    String   @db.VarChar(20)
  email          String
  additionalInfo String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?

  @@unique([userId, phoneNumber])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  username           String              @unique
  email              String              @unique
  password           String?
  image              String?
  emailVerified      DateTime?
  role               ROLE                @default(USER)
  verificationTokens VerificationToken[]
  orders             Order[]
  DeliveryAddress    DeliveryAddress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([identifier, token])
}
