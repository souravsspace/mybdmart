generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Billboard {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  imageUrl  String
  createdAt DateTime @default(now())
  active    Boolean  @default(false)
  updatedAt DateTime @updatedAt
}

model Product {
  id           String        @id @default(cuid())
  name         String        @db.VarChar(255)
  price        Int
  newPrice     Int?
  description  String
  isFeatured   Boolean       @default(false)
  isArchived   Boolean       @default(false)
  stock        STOCK         @default(IN_STOCK)
  sell         Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  categoryId   String?
  images       Image[]       @relation("ProductToImage")
  orderedItems OrderedItem[] @relation("OrderedItemToProduct")
  category     Category?     @relation(fields: [categoryId], references: [id])
  colors       Color[]       @relation("ProductToColor")
  sizes        Size[]        @relation("ProductToSize")
}

model Size {
  id          String        @id @default(cuid())
  name        String        @db.VarChar(255)
  value       String        @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  OrderedItem OrderedItem[] @relation("OrderedItemToSize")
  products    Product[]     @relation("ProductToSize")
}

model Color {
  id          String        @id @default(cuid())
  name        String        @db.VarChar(255)
  value       String        @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  OrderedItem OrderedItem[] @relation("ColorToOrderedItem")
  products    Product[]     @relation("ProductToColor")
}

model Image {
  id        String   @id @default(cuid())
  imageUrl  String
  productId String?
  product   Product? @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id             String        @id @default(cuid())
  totalPrice     Int
  totalItems     Int
  status         ORDER_STATUS  @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String?
  deliveryCharge Int
  user           User?         @relation(fields: [userId], references: [id])
  orderedItems   OrderedItem[]
}

model OrderedItem {
  id              String   @id @default(cuid())
  price           Int
  productId       String?
  orderId         String?
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  productQuantity Int
  order           Order?   @relation(fields: [orderId], references: [id])
  product         Product? @relation("OrderedItemToProduct", fields: [productId], references: [id])
  color           Color[]  @relation("ColorToOrderedItem")
  size            Size[]   @relation("OrderedItemToSize")
}

model DeliveryAddress {
  id             String   @id @default(cuid())
  name           String   @db.VarChar(255)
  address        String   @db.VarChar(255)
  city           String   @db.VarChar(255)
  zip            String   @db.VarChar(20)
  googleMapLink  String?
  insideDhaka    Boolean
  phoneNumber    String   @db.VarChar(20)
  email          String   @unique
  additionalInfo String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User[]
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  username           String              @unique
  email              String              @unique
  password           String?
  image              String?
  emailVerified      DateTime?
  role               ROLE                @default(USER)
  deliveryAddressId  String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  orders             Order[]
  deliveryAddress    DeliveryAddress?    @relation(fields: [deliveryAddressId], references: [id])
  verificationTokens VerificationToken[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])

  @@unique([identifier, token])
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String   @db.VarChar(50)
  lastName    String   @db.VarChar(50)
  email       String   @db.VarChar(255)
  phoneNumber Int
  topic       String   @db.VarChar(255)
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ROLE {
  USER
  ADMIN
  MOD
}

enum STOCK {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  CANCELLED
  DELIVERED
  REFUNDED
}
